#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Impulse MACD Ë≤∑ÂÖ•Ë¶èÂâáÊ∏¨Ë©¶Á®ãÂºè

Ê≠§ËÖ≥Êú¨ÊúÉÂª∫Á´ã‰∏ÄÁµÑÂèØÊéßÁöÑÊ∏¨Ë©¶Ë≥áÊñô,È©óË≠â impulse_macd_buy_rule.py ‰∏≠‰∏âÂÄãË≤∑ÂÖ•Ê™¢Êü•ÂáΩÊï∏ÁöÑË°åÁÇ∫:
1. Èõ∂Á∑ö‰∫§ÂèâË≤∑ÂÖ•Ë®äËôü
2. ‰ø°ËôüÁ∑ö‰∫§ÂèâË≤∑ÂÖ•Ë®äËôü
3. Á∂úÂêàË≤∑ÂÖ•Ë®äËôü (Âê´ÂèØÈÅ∏ÁöÑÊ≠£Êü±ÁãÄÂúñÊ¢ù‰ª∂)

‰∫¶ÊîØÊè¥ÈÄèÈÅéËº∏ÂÖ•ËÇ°Á•®‰ª£Á¢ºËºâÂÖ•ÁúüÂØ¶Ë≥áÊñôÈÄ≤Ë°åÈ©óË≠â„ÄÇ
"""

import argparse
import os
import sys
from pathlib import Path
from typing import List, Optional

import pandas as pd

# Â∞á src ÁõÆÈåÑÂä†ÂÖ• Python ÊêúÂ∞ãË∑ØÂæë
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.buyRule.impulse_macd_buy_rule import (
    check_impulse_macd_zero_cross_buy,
    check_impulse_macd_signal_cross_buy,
    check_impulse_macd_combined_buy,
)


def build_sample_dataframe() -> pd.DataFrame:
    """
    Âª∫Á´ãÂÖ∑ÂÇôÂ∑≤Áü• Impulse MACD Ë°åÁÇ∫ÁöÑÊ∏¨Ë©¶ DataFrame„ÄÇ
    Êó•ÊúüÁ¥¢ÂºïÊé°ÊØèÊó•È†ªÁéá,ÊâÄÊúâÊ¨Ñ‰ΩçÁöÜÁÇ∫Êï∏ÂÄºÂûãÊÖã,Á¢∫‰øùÊ∏¨Ë©¶ÁµêÊûúÁ©©ÂÆö„ÄÇ
    """
    dates = pd.date_range('2024-01-01', periods=7, freq='D')
    data = {
        'ImpulseMACD': [-0.8, -0.2, 0.15, 0.30, 0.05, -0.10, 0.20],
        'ImpulseSignal': [-0.5, -0.1, -0.05, 0.10, 0.08, 0.00, 0.05],
        'ImpulseHistogram': [-0.3, -0.1, 0.20, 0.20, -0.03, -0.10, 0.15],
    }
    df = pd.DataFrame(data, index=dates)
    df.index.name = 'date'
    return df


def load_real_dataframe(stock_id: str, days: int) -> pd.DataFrame:
    """
    ÈÄèÈÅé load_stock_data ËºâÂÖ•ÁúüÂØ¶ËÇ°Á•®Ë≥áÊñô,‰∏¶Á¢∫‰øùÂåÖÂê´ÂøÖË¶ÅÊ¨Ñ‰Ωç„ÄÇ
    """
    from src.validate_buy_rule import load_stock_data
    from src.data_initial.calculate_impulse_macd import calculate_impulse_macd

    df = load_stock_data(stock_id, 'D')
    if df is None or df.empty:
        raise ValueError(f"ÁÑ°Ê≥ïËºâÂÖ•ËÇ°Á•® {stock_id} ÁöÑÊó•Á∑öË≥áÊñô")

    if not isinstance(df.index, pd.DatetimeIndex):
        if 'date' in df.columns:
            df['date'] = pd.to_datetime(df['date'])
            df = df.set_index('date')
        else:
            raise ValueError("ËºâÂÖ•ÁöÑË≥áÊñôÁº∫Â∞ëÊó•ÊúüÁ¥¢Âºï,ÁÑ°Ê≥ïÈÄ≤Ë°åÊ∏¨Ë©¶")

    df = df.sort_index()
    if days > 0:
        df = df.tail(days)

    required_cols = ['ImpulseMACD', 'ImpulseSignal', 'ImpulseHistogram']
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        print(f"‚öôÔ∏è  ËÇ°Á•® {stock_id} Áº∫Â∞ëÊ¨Ñ‰Ωç {missing_cols},Ëá™ÂãïË®àÁÆó Impulse MACD ÊåáÊ®ô...")
        df = calculate_impulse_macd(df)
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            raise ValueError(
                f"ËÇ°Á•® {stock_id} Áº∫Â∞ëÂøÖË¶ÅÊ¨Ñ‰Ωç: {', '.join(missing_cols)}\n"
                "Ë´ãÂÖàÂü∑Ë°å append_indicator Áî¢ÁîüÂ∞çÊáâÊåáÊ®ô"
            )

    return df


def assert_signal(result_df: pd.DataFrame, column: str, expected: List[str]) -> None:
    """
    Á¢∫Ë™çÁµêÊûúÊ¨Ñ‰ΩçÂÖßÂÆπËàáÈ†êÊúü‰∏ÄËá¥,Ëã•‰∏çÁõ∏Á¨¶ÂâáÊããÂá∫ AssertionError„ÄÇ
    """
    actual = result_df[column].tolist()
    assert actual == expected, (
        f"{column} È©óË≠âÂ§±Êïó\n"
        f"  ÊúüÊúõ: {expected}\n"
        f"  ÂØ¶Èöõ: {actual}\n"
        f"ÁµêÊûú DataFrame:\n{result_df}"
    )


def summarize_signals(result_df: pd.DataFrame, column: str, label: str) -> None:
    """
    Ëº∏Âá∫ÊåáÂÆöÁµêÊûúÊ¨Ñ‰ΩçÁöÑËß∏ÁôºÊó•ÊúüÊëòË¶Å„ÄÇ
    """
    hits = result_df[result_df[column] == 'O']
    if hits.empty:
        print(f"   ‚û§ Êú™ÂÅµÊ∏¨Âà∞ {label} Ë®äËôü")
    else:
        dates = ', '.join(hits['date'].tolist())
        print(f"   ‚û§ {label} Ë®äËôüÂÖ± {len(hits)} Ê¨°: {dates}")


def run_tests(
    stock_id: Optional[str] = None,
    days: int = 120,
    plot_chart: bool = False,
    chart_path: Optional[str] = None,
) -> None:
    """
    Âü∑Ë°å‰∏âÈ†ÖË≤∑ÂÖ•Ë¶èÂâáÁöÑÊï¥ÂêàÊ∏¨Ë©¶‰∏¶Ëº∏Âá∫ÁµêÊûú„ÄÇ
    Ëã•Êèê‰æõ stock_id, Ââá‰ª•ÁúüÂØ¶Ë≥áÊñôÈ©óË≠â; Âê¶Ââá‰ΩøÁî®ÁØÑ‰æãË≥áÊñô‰∏¶ÈÄ≤Ë°åÊñ∑Ë®Ä„ÄÇ
    """
    print("=== Impulse MACD Ë≤∑ÂÖ•Ë¶èÂâáÊ∏¨Ë©¶ ===\n")
    if stock_id:
        try:
            df = load_real_dataframe(stock_id, days)
        except ValueError as exc:
            print(f"‚ùå Ê∏¨Ë©¶ÁÑ°Ê≥ïÈÄ≤Ë°å: {exc}")
            return

        print(f"üìà ‰ΩøÁî®ËÇ°Á•® {stock_id} Êó•Á∑öË≥áÊñô (ÊúÄËøë {len(df)} Á≠Ü)")
        preview_len = min(len(df), 10)
        print(df.tail(preview_len).to_string())
        print()
    else:
        df = build_sample_dataframe()
        print("üìä Ê∏¨Ë©¶Ë≥áÊñô (Âê´ ImpulseMACD„ÄÅImpulseSignal„ÄÅImpulseHistogram):")
        print(df)
        print()

    print("1Ô∏è‚É£ Ê∏¨Ë©¶Èõ∂Á∑ö‰∫§ÂèâË≤∑ÂÖ•Ë®äËôü...")
    zero_cross_df = check_impulse_macd_zero_cross_buy(df)
    print(zero_cross_df if not stock_id else zero_cross_df.tail(10))
    if stock_id:
        summarize_signals(zero_cross_df, 'impulse_macd_zero_cross_buy', 'Èõ∂Á∑ö‰∫§Âèâ')
    else:
        assert_signal(
            zero_cross_df,
            'impulse_macd_zero_cross_buy',
            ['', '', 'O', '', '', '', 'O'],
        )
        print("‚úÖ Èõ∂Á∑ö‰∫§ÂèâÊ∏¨Ë©¶ÈÄöÈÅé")
    print()

    print("2Ô∏è‚É£ Ê∏¨Ë©¶‰ø°ËôüÁ∑ö‰∫§ÂèâË≤∑ÂÖ•Ë®äËôü...")
    signal_cross_df = check_impulse_macd_signal_cross_buy(df)
    print(signal_cross_df if not stock_id else signal_cross_df.tail(10))
    if stock_id:
        summarize_signals(signal_cross_df, 'impulse_macd_signal_cross_buy', '‰ø°ËôüÁ∑ö‰∫§Âèâ')
    else:
        assert_signal(
            signal_cross_df,
            'impulse_macd_signal_cross_buy',
            ['', '', 'O', '', '', '', 'O'],
        )
        print("‚úÖ ‰ø°ËôüÁ∑ö‰∫§ÂèâÊ∏¨Ë©¶ÈÄöÈÅé")
    print()

    print("3Ô∏è‚É£ Ê∏¨Ë©¶Á∂úÂêàË≤∑ÂÖ•Ë®äËôü (‰∏çÈôêÂà∂Êü±ÁãÄÂúñ)...")
    combined_df = check_impulse_macd_combined_buy(df, require_positive_histo=False)
    print(combined_df if not stock_id else combined_df.tail(10))
    if stock_id:
        summarize_signals(combined_df, 'impulse_macd_buy', 'Á∂úÂêàË≤∑ÂÖ•')
    else:
        assert_signal(
            combined_df,
            'impulse_macd_buy',
            ['', '', 'O', '', '', '', 'O'],
        )
        print("‚úÖ Á∂úÂêàË≤∑ÂÖ•Ê∏¨Ë©¶ (ÁÑ°Êü±ÁãÄÂúñÈôêÂà∂) ÈÄöÈÅé")
    print()

    print("4Ô∏è‚É£ Ê∏¨Ë©¶Á∂úÂêàË≤∑ÂÖ•Ë®äËôü (Ë¶ÅÊ±ÇÊü±ÁãÄÂúñÁÇ∫Ê≠£)...")
    combined_positive_df = check_impulse_macd_combined_buy(df, require_positive_histo=True)
    print(combined_positive_df if not stock_id else combined_positive_df.tail(10))
    if stock_id:
        summarize_signals(combined_positive_df, 'impulse_macd_buy', 'Á∂úÂêàË≤∑ÂÖ• (Êü±ÁãÄÂúñ>0)')
    else:
        assert_signal(
            combined_positive_df,
            'impulse_macd_buy',
            ['', '', 'O', '', '', '', 'O'],
        )
        print("‚úÖ Á∂úÂêàË≤∑ÂÖ•Ê∏¨Ë©¶ (Âê´Êü±ÁãÄÂúñÈôêÂà∂) ÈÄöÈÅé")
        print("\nüéâ ÊâÄÊúâÊ∏¨Ë©¶ÁöÜÊàêÂäü!")
    print()

    if stock_id and plot_chart:
        try:
            chart_file = chart_path or f"output/test_charts/impulse_macd_{stock_id}.png"
            chart_file = str(Path(chart_file).expanduser())
            Path(chart_file).parent.mkdir(parents=True, exist_ok=True)
            create_impulse_chart(
                stock_id,
                df,
                zero_cross_df,
                signal_cross_df,
                combined_df,
                combined_positive_df,
                chart_file,
            )
            print(f"üñºÔ∏è  ÂúñË°®Â∑≤Ëº∏Âá∫: {chart_file}")
        except Exception as exc:
            print(f"‚ö†Ô∏è  ÁîüÊàêÂúñË°®ÊôÇÁôºÁîüÂïèÈ°å: {exc}")
            import traceback
            traceback.print_exc()


def create_impulse_chart(
    stock_id: str,
    df: pd.DataFrame,
    zero_cross_df: pd.DataFrame,
    signal_cross_df: pd.DataFrame,
    combined_df: pd.DataFrame,
    combined_positive_df: pd.DataFrame,
    chart_path: str,
) -> None:
    """
    Âª∫Á´ã‰∏¶ÂÑ≤Â≠òÂê´Ë≤∑ÂÖ•Ë®äËôüÁöÑ K Á∑öÂúñËàá Impulse MACD ÊåáÊ®ôÈù¢Êùø„ÄÇ
    """
    import mplfinance as mpf
    import matplotlib.font_manager as fm

    plot_df = df[['Open', 'High', 'Low', 'Close', 'Volume']].copy()
    plot_df = plot_df.sort_index()

    def _signal_series(source_df: pd.DataFrame, column: str, offset: float) -> pd.Series:
        signal_dates = pd.to_datetime(source_df[source_df[column] == 'O']['date'], errors='coerce')
        signal_dates = [d for d in signal_dates if pd.notna(d) and d in plot_df.index]
        series = pd.Series(data=float('nan'), index=plot_df.index)
        if signal_dates:
            prices = plot_df.loc[signal_dates, 'Close']
            series.loc[signal_dates] = prices * offset
        return series

    addplots = []
    signal_settings = [
        ('impulse_macd_zero_cross_buy', zero_cross_df, 0.99, 'tab:green', '^', 'Èõ∂Á∑ö‰∫§Âèâ'),
        ('impulse_macd_signal_cross_buy', signal_cross_df, 0.97, 'tab:orange', '^', '‰ø°ËôüÁ∑ö‰∫§Âèâ'),
        ('impulse_macd_buy', combined_df, 1.02, 'tab:blue', 'o', 'Á∂úÂêàË≤∑ÂÖ•'),
        ('impulse_macd_buy', combined_positive_df, 1.04, 'tab:purple', 'D', 'Á∂úÂêàË≤∑ÂÖ•(Êü±ÁãÄÂúñ>0)'),
    ]

    for column, source_df, offset, color, marker, label in signal_settings:
        series = _signal_series(source_df, column, offset)
        if series.notna().any():
            addplots.append(
                mpf.make_addplot(
                    series,
                    type='scatter',
                    markersize=120,
                    marker=marker,
                    color=color,
                    label=label,
                )
            )

    # Impulse MACD Èù¢Êùø
    if {'ImpulseMACD', 'ImpulseSignal', 'ImpulseHistogram'}.issubset(df.columns):
        impulse_panel = 1
        addplots.append(
            mpf.make_addplot(
                df['ImpulseMACD'],
                panel=impulse_panel,
                color='tab:blue',
                width=1.2,
                ylabel='Impulse MACD',
            )
        )
        addplots.append(
            mpf.make_addplot(
                df['ImpulseSignal'],
                panel=impulse_panel,
                color='tab:orange',
                width=1.0,
            )
        )
        histogram_colors = ['tab:green' if val >= 0 else 'tab:red' for val in df['ImpulseHistogram']]
        addplots.append(
            mpf.make_addplot(
                df['ImpulseHistogram'],
                type='bar',
                panel=impulse_panel,
                color=histogram_colors,
                alpha=0.6,
            )
        )
        panel_ratios = (4, 2, 1)
        volume_panel = 2
    else:
        impulse_panel = None
        panel_ratios = (4, 1)
        volume_panel = 1

    available_fonts = {f.name for f in fm.fontManager.ttflist}
    preferred_fonts = [
        'Microsoft JhengHei',
        'Microsoft YaHei',
        'SimHei',
        'PingFang TC',
        'PingFang SC',
        'Noto Sans CJK TC',
        'Noto Sans CJK SC',
        'WenQuanYi Zen Hei',
        'Source Han Sans TC',
        'Source Han Sans SC',
        'Arial Unicode MS',
    ]
    selected_font = next((font for font in preferred_fonts if font in available_fonts), 'DejaVu Sans')

    rc_kwargs = {
        'font.family': 'sans-serif',
        'font.sans-serif': [
            selected_font,
            'DejaVu Sans',
        ],
    }
    style = mpf.make_mpf_style(base_mpf_style='yahoo', rc=rc_kwargs)
    title = f"{stock_id} Impulse MACD Ë≤∑ÂÖ•Ë®äËôü"

    mpf.plot(
        plot_df,
        type='candle',
        volume=True,
        volume_panel=volume_panel,
        addplot=addplots,
        style=style,
        title=title,
        figscale=1.2,
        figratio=(16, 9),
        panel_ratios=panel_ratios,
        savefig=chart_path,
        datetime_format='%Y-%m-%d',
        tight_layout=True,
    )


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Impulse MACD Ë≤∑ÂÖ•Ë¶èÂâáÊ∏¨Ë©¶Á®ãÂºè")
    parser.add_argument(
        '--stock',
        help="ÊåáÂÆöËÇ°Á•®‰ª£Á¢º,Â∞á‰ª•ÁúüÂØ¶Êï∏ÊìöÈÄ≤Ë°åË≤∑ÂÖ•Ë®äËôüÊ™¢Ê∏¨",
    )
    parser.add_argument(
        '--days',
        type=int,
        default=120,
        help="ËºâÂÖ•ËÇ°Á•®Ë≥áÊñôÊôÇÂèñÁî®ÁöÑÊúÄËøëÂ§©Êï∏ (È†êË®≠: 120)",
    )
    parser.add_argument(
        '--plot',
        action='store_true',
        help="Ëº∏Âá∫Âê´Ë≤∑ÂÖ•Ë®äËôüÁöÑ K Á∑öÂúñ",
    )
    parser.add_argument(
        '--chart-path',
        help="Ëá™Ë®ÇÂúñË°®Ëº∏Âá∫Ë∑ØÂæë (È†àËàá --plot Êê≠ÈÖç‰ΩøÁî®)",
    )
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()

    stock_id = args.stock
    plot_chart = args.plot
    chart_path = args.chart_path

    if stock_id is None and sys.stdin.isatty():
        try:
            user_input = input("Ëº∏ÂÖ•ËÇ°Á•®‰ª£Á¢º (Áõ¥Êé• Enter ‰ΩøÁî®ÂÖßÂª∫ÁØÑ‰æãË≥áÊñô): ").strip()
        except EOFError:
            user_input = ''
        if user_input:
            stock_id = user_input
            if not plot_chart:
                try:
                    plot_choice = input("ÊòØÂê¶Ëº∏Âá∫Âê´Ë≤∑ÂÖ•Ë®äËôüÁöÑÂúñË°®? (y/N): ").strip().lower()
                except EOFError:
                    plot_choice = 'n'
                plot_chart = plot_choice == 'y'

    if plot_chart and not chart_path and stock_id:
        chart_path = f"output/test_charts/impulse_macd_{stock_id}.png"

    run_tests(
        stock_id=stock_id,
        days=args.days,
        plot_chart=plot_chart,
        chart_path=chart_path,
    )
